[{"categories":["RNA-seq data analysis"],"content":"In this section, we are going to concatenate 4 read files from one sample into 1 and perform Fastqc, multiqc, and Trim_galore to check the quality.","date":"2022-04-06","objectID":"/preparation-of-clean-reads-data-for-rna-seq/","tags":["RNA-seq data analysis"],"title":"Preparation of clean read data for RNA-seq data analysis","uri":"/preparation-of-clean-reads-data-for-rna-seq/"},{"categories":["RNA-seq data analysis"],"content":"Summary In this section, we are going to concatenate 4 read files from the same sample into 1 file and perform Fastqc, multiqc, and Trim_galore to check the quality of each read data. ","date":"2022-04-06","objectID":"/preparation-of-clean-reads-data-for-rna-seq/:0:0","tags":["RNA-seq data analysis"],"title":"Preparation of clean read data for RNA-seq data analysis","uri":"/preparation-of-clean-reads-data-for-rna-seq/"},{"categories":["RNA-seq data analysis"],"content":"1. Concatenation of raw read files First of all, the operating system (OS) I used is Linux Ubuntu 20.04.4. And what I have in my hand are 64 raw read fastq.gz files. What we need to do first is to concatenate 4 files into one, for example: File name (before) File name(after) LAB_273_17_‚Ä¶_L001_R1_001.fastq.gz LAB_273_17_R1.fastq.gz LAB_273_17_‚Ä¶_L002_R1_001.fastq.gz LAB_273_17_‚Ä¶_L003_R1_001.fastq.gz LAB_273_17_‚Ä¶_L004_R1_001.fastq.gz in Linux, open the terminal for name in *.fastq.gz; do printf '%s\\n' \"${name%_*_*_R[12]*}\" done | uniq | while read prefix; do cat \"$prefix\"*R1*.fastq.gz \u003e\"${prefix}_R1.fastq.gz\" cat \"$prefix\"*R2*.fastq.gz \u003e\"${prefix}_R2.fastq.gz\" done Then check whether they are concatenated or not. ","date":"2022-04-06","objectID":"/preparation-of-clean-reads-data-for-rna-seq/:1:0","tags":["RNA-seq data analysis"],"title":"Preparation of clean read data for RNA-seq data analysis","uri":"/preparation-of-clean-reads-data-for-rna-seq/"},{"categories":["RNA-seq"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo.","date":"2022-04-06","objectID":"/rna-seq-protocolstar/","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"History Version: RNA-seq Protocol (v1.0.1): adding the discussion when there are too many NA values RNA-seq Protocol (v1.0.2): adding trimming tools using trim_galore RNA-seq Protocol (v1.1.0): changing mapping tools from CLC Genomics Workbench to STAR (linux base) ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:0:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"1. Concatenation of 4 read files For 1 sample, we will have 8 files based on different cameras when constructing the library (Prof. Muratani). We need to concatenate them into 2 files. For example: ‚Äã | L001_R1 ‚Äã | L002_R1 ‚Äã | L003_R1 ‚Äã | L004_R1 |1_R1.fastq.gz Sample No.1 ‚Äî‚Äî‚Äî‚Äî-\u003e | L001_R2 ‚Äî‚Äî‚Äî‚Äî-\u003e ‚Äã | L001_R2 |1_R2.fastq.gz ‚Äã | L001_R2 ‚Äã | L001_R2 in Linux, open the terminal for name in *.fastq.gz; do printf '%s\\n' \"${name%_*_*_R[12]*}\" done | uniq | while read prefix; do cat \"$prefix\"*R1*.fastq.gz \u003e\"${prefix}_R1.fastq.gz\" cat \"$prefix\"*R2*.fastq.gz \u003e\"${prefix}_R2.fastq.gz\" done Then check whether they are concatenated or not. ls -lha ----rwxrwx+ 1 268M Feb 22 2021 13_R1.fastq.gz ----rwxrwx+ 1 270M Feb 22 2021 13_R2.fastq.gz ----rwxrwx+ 1 238M Feb 22 2021 14_R1.fastq.gz ----rwxrwx+ 1 243M Feb 22 2021 14_R2.fastq.gz ----rwxrwx+ 1 204M Feb 22 2021 15_R1.fastq.gz ----rwxrwx+ 1 206M Feb 22 2021 15_R2.fastq.gz ----rwxrwx+ 1 435M Feb 22 2021 16_R1.fastq.gz ----rwxrwx+ 1 445M Feb 22 2021 16_R2.fastq.gz ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:1:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"2. Quality check of read files (FASTQC \u0026 MultiQC) fastqc *.gz multiqc . Measure Value Filename LAB_277_07_R2.fastq.gz File type Conventional base calls Encoding Sanger / Illumina 1.9 Total Sequences 19360829 Sequences flagged as poor quality 0 Sequence length 36 %GC 47 ‚Äã For example, You can see the final bases in 07_R2 has a not so good quality (in the yellow zone). To improve the reliability of the read files, we need to trim the files. ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:2:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"3. Trimming by TrimGalore (üîªnot strictly necessary) After Quality Control, we need to trim the sequences to remove the low-quality sequence and adapters (if there is). Here, we used Trimmomatic for Trimming. The reason is that trimGalore can automatically search for the adapter sequence, you do not need to import by yourself. trim_galore -version trim_galore --help trim_galore -q 25 --phred 33 --stringency 3 --length 30 --paired 1_R1.fastq.gz 1_R2.fastq.gz --gzip -o./cleandata one paired samples take about 15 min. For trimming every sample at once, please refer to this article. https://cloud.tencent.com/developer/article/1703054 (Chinese material) for i in 13 14 15 16 17 18 do trim_galore -q 25 --phred 33 --stringency 3 --length 30 --paired /wkdir/${i}_1.fq.gz /wkdir/${i}_2.fq.gz --gzip -o /home/akif/RNA-seq/trimmed files done Measure Value Filename LAB_277_07_R2_val_2.fq.gz File type Conventional base calls Encoding Sanger / Illumina 1.9 Total Sequences 15443481 Sequences flagged as poor quality 0 Sequence length 36 %GC 46 After the trimming, the quality becomes better! ‚ùóNotice: Trimming ‚â† Filtration! ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:3:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"4. Mapping (STAR + Qualimap + featureCounts) ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:4:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"4.1 installation of STAR https://github.com/alexdobin/STAR # Get latest STAR source from releases wget https://github.com/alexdobin/STAR/archive/2.7.9a.tar.gz tar -xzf 2.7.9a.tar.gz cd STAR-2.7.9a # Compile under Linux cd /STAR-2.7.9a/source make STAR #test STAR ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:4:1","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"4.2 Generation of genome index For mapping, the first step that needs to be done is the generation of the genome index. Here, I used the data from Genecode https://www.gencodegenes.org/ #create a new folder named as index mkdir /home/akif/reference/index #running STAR for the generation of index STAR --runThreadN 10 --runMode genomeGenerate --genomeDir index/ --genomeFastaFiles GRCh38.p13.genome.fa --sjdbGTFfile gencode.v38.annotation.gtf --sjdbOverhang 35 ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:4:2","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"4.3 Running Mapping using two-pass-mode STAR --runThreadN 10 --runMode alignReads --readFilesCommand zcat --twopassMode Basic --outSAMtype BAM SortedByCoordinate --genomeDir /reference/genome/grcm39/index/ --readFilesIn 2_R1_val_1.fq.gz 2_R2_val_2.fq.gz --outFileNamePrefix /wkdir/WT2Brain one sample takes about 6 minutes Dec 07 18:03:31 ..... started STAR run Dec 07 18:03:31 ..... loading genome Dec 07 18:05:35 ..... started 1st pass mapping Dec 07 18:07:22 ..... finished 1st pass mapping Dec 07 18:07:22 ..... inserting junctions into the genome indices Dec 07 18:08:19 ..... started mapping Dec 07 18:10:16 ..... finished mapping Dec 07 18:10:18 ..... started sorting BAM Dec 07 18:11:13 ..... finished successfully ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:4:3","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"5. QC of mapping using Qualimap ~/Desktop/qualimap_v2.2.1/qualimap rnaseq -bam /dir/xxx.bam -gtf /dir/annotation.gtf -outdir /dir/WT1 --jav-mem-size=8G Check how many percentages of reads are mapped : Check how many percentages of the reads are exonic: ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:5:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"6. Obtain counts data using featureCounts /home/akif/Downloads/subread-2.0.3-source/bin/featureCounts -s 2 -p -t gene -g gene_id -a /dir/annotation.gtf -o counts.txt *.bam Delete the columns which are not necessary. cut -f1,7-100 ${WORKDIR}/count/count.txt \u003e ${WORKDIR}/count/featurecounts.txt ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:6:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"7. Data preparation using R ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:7:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8. DEG analysis and plot creation by DEseq2 using R ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:0","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.1 data preparation For DEG analysis in R, we first need to prepare the data. ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:1","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.2 Normalization by DEseq2 (PCA plot) üü¢Set working directory setwd(\"D:/Yao/R data analysis/heart/8w/\") getwd() üü¢input row count data mycounts \u003c- read.csv(\"totalreads.csv\",row.names=1) head(mycounts) dim(mycounts) üü¢Delete the gene whose reads are all 0 mycounts1 \u003c- mycounts[rowSums(mycounts) !=0,] dim(mycounts1) üü¢Input metadata mymeta \u003c- read.csv(\"metadata.csv\",stringsAsFactors = T) mymeta üü¢check whether matched or not colnames(mycounts) == mymeta$id üü¢Using package of DESeq2 library(DESeq2) dds \u003c- DESeqDataSetFromMatrix(countData = mycounts, colData=mymeta, design=~group) üü¢Compare A to B or B to A dds$group \u003c- relevel(dds$group,ref=\"WT(8W)\") üü¢PCA plot rld \u003c- rlog(dds,blind=TRUE) a \u003c- DESeq2 ::plotPCA(rld,intgroup=\"group\") a ggsave(\"pca.png\",units=\"cm\",width=20,height=10,dpi=1200) üî¥Filtration (selection) This time I deleted the genes whose count number is 0 in more than 3 samples Gene ID 1 2 3 4 5 6 A 0 0 0 0 25 90 keep \u003c- rowSums(counts(dds)\u003e0) \u003e=3 dds_filt \u003c- dds[keep, ] üü¢usage of deseq2 package to normalize dds2 \u003c- DESeq(dds) üü¢Extract file resultsNames(dds2) res \u003c- results(dds2) head(res) class(res) summary(res) res1 \u003c- data.frame(res) üü¢Extract Gene name with categories res_deseq2 \u003c- as.data.frame(res) %\u003e% arrange(padj) %\u003e% dplyr::filter(abs(log2FoldChange)\u003e1, padj \u003c0.05) library(dplyr) res1 %\u003e% mutate(group =case_when( log2FoldChange \u003e=1 \u0026 padj \u003c=0.05 ~\"Up-regulated\", log2FoldChange \u003c=-1 \u0026 padj \u003c=0.05 ~\"Down-regulated\", TRUE ~ \"NOT_CHANGE\" )) -\u003e res2 table(res2$group) write.csv(res_deseq2, file= \"diff_expr_results2.csv\", quote =F) gene baseMean log2FoldChange lfcSE stat pvalue padj ENSMUSG00000031710 Ucp1 43.07624 2.974274 0.488488 6.088733 1.14E-09 4.41E-07 ENSMUSG00000063415 Cyp26b1 101.4576 2.100137 0.225587 9.309671 1.28E-20 3.48E-17 ENSMUSG00000037071 Scd1 1063.955 1.738576 0.464263 3.744806 0.000181 0.013804 ENSMUSG00000055116 Arntl 130.8439 1.475163 0.229906 6.416385 1.40E-10 6.59E-08 ENSMUSG00000022878 Adipoq 42.5923 1.373729 0.372906 3.683845 0.00023 0.01663 ENSMUSG00000033022 Cdo1 72.20402 1.322302 0.32309 4.092676 4.26E-05 0.004452 ENSMUSG00000037379 Spon2 42.76113 1.318675 0.35086 3.758412 0.000171 0.013357 üíîVery Unfortunately, only few genes passed the filtration. DOWN-regulated NOT_CHANGE UP-regulated 9 25647 12 ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:2","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.3 When there are too many NA in padj If you check your own excel file, you may find many many NA value under padj, which may be a serious problem for DEG analysis. Note on p-values set to NA: some values in the results table can be set to NA for one of the following reasons: If within a row, all samples have zero counts, the baseMean column will be zero, and the log2 fold change estimates, p value and adjusted p value will all be set to NA. If a row contains a sample with an extreme count outlier then the p value and adjusted p value will be set to NA. These outlier counts are detected by Cook‚Äôs distance. Customization of this outlier filtering and description of functionality for replacement of outlier counts and refitting is described below If a row is filtered by automatic independent filtering, for having a low mean normalized count, then only the adjusted p value will be set to NA. Description and customization of independent filtering is described below To see the real padj value, please change the command in DESeq2. dds2 \u003c- DESeq(dds,minReplicatesForReplace = Inf) res \u003c- results(dds2,cooksCutoff = FALSE,independentFiltering = FALSE) Re-calculate your padj again. ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:3","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.4 MA plot library(geneplotter) plotMA(res, main=\"MA plot\") ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:4","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.5 Volcano plot (CELL) Next, we are going to create the Volcano plot based on the requirement in Cell journal. deg.data \u003c- read.csv(\"res2.csv\") head(deg.data) deg.data$logp \u003c- -log10(deg.data$padj) ggscatter(deg.data, x=\"log2FoldChange\",y=\"logp\")+theme_base() table(deg.data$group) head(deg.data$X) deg.data$label = \"\" up.genes \u003c- head(deg.data$X[which (deg.data$group==\"Up-regulated\")],10) down.genes \u003c- head(deg.data$X[which (deg.data$group==\"Down-regulated\")],10) deg.deg \u003c- c(as.character(up.genes),as.character(down.genes)) deg.data$label[match(deg.deg,deg.data$X)] \u003c- deg.deg remotes::install_github(\"rpkgs/Ipaper\") pi\u003c- ggscatter(deg.data, x=\"log2FoldChange\",y=\"logp\", color=\"group\", palette = c(\"#2F5688\",\"#BBBBBB\",\"#CC0000\"), size=2, label=deg.data$label, font.label=8, repel=T, xlim=c(-2.5,2.8), xlab = \"log2FoldChange\", ylab =\"-log10(Adjusted P-value)\" ) + theme_base() + geom_hline(yintercept=1.30,linetype=\"dashed\")+ geom_vline(xintercept= c(-1,1),linetype=\"dashed\") pi ggsave(\"pi.png\",units=\"cm\",width=20,height=10,dpi=1200) ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:5","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.6 Dot plot to check the DEGs Then, we need to check whether the DEGs really show the significant difference by dot plot. padj_cutoff \u003c- 0.05 sig_res \u003c- dplyr::filter(res1,padj \u003c padj_cutoff \u0026 abs(log2FoldChange) \u003e1 ) %\u003e% dplyr::arrange(padj) sig_res install.packages(\"tibble\") library(tibble) library(tidyr) library(dplyr) library(ggplot2) write.csv(sig_res,file=\"sig_res.csv\",quote=F) sig_res \u003c-read.csv(\"sig_res.csv\") normalized_counts \u003c- counts(dds2,normalized=TRUE) top_sig_genes \u003c- sig_res %\u003e% dplyr::arrange(padj) %\u003e% dplyr::arrange(log2FoldChange) %\u003e% dplyr::pull(gene) %\u003e% head(n=21) top_sig_genes write.csv(top_sig_genes, file= \"top_sig_gene.csv\", quote =F) #Ëá™Ë°å‰øÆÊîπ top_sig_genes2 \u003c- read.csv(\"top_sig_gene.csv\") top_sig_genes2 top_sig_norm \u003c- data.frame(normalized_counts) %\u003e% rownames_to_column (var=\"gene\") %\u003e% dplyr::filter( gene %in% top_sig_genes) ord \u003c- order(top_sig_genes2[,1]) ord top_sig_norm1\u003c- top_sig_norm[ord,] top_sig_norm1 gathered_top_genes \u003c- top_sig_norm %\u003e% gather(colnames(top_sig_norm)[2:length(colnames(top_sig_norm))],key = \"samplename\",value=\"normalized_counts\") gathered_top_genes gathered_top_genes \u003c- inner_join(mymeta[,c(\"id\",\"group\")],gathered_top_genes, by =c(\"id\"=\"samplename\")) write.csv(gathered_top_genes, file= \"gathered.csv\", quote =F) #dot plot to check the quality topgene \u003c- ggplot(gathered_top_genes) + geom_point(aes(x =gene,y=normalized_counts,color = group),position = position_jitter(w=0.1,h=0),size=2) + scale_y_log10() + xlab(\"Gene\")+ylab(\"log10 Normalized Counts\") + ggtitle(\"Top Significant DE genes\") + theme_bw() + theme(axis.text.x =element_text(angle =45,hjust=1) ) + theme(plot.title =element_text(hjust=0.5)) topgene ggsave(\"topgene.png\",units=\"cm\",width=20,height=10,dpi=1200) ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:6","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":["RNA-seq"],"content":"8.7 Gene Ontology Analysis (bubble plot) Finally, we are going to see which BP, CC, MF is related to the DEGs. setwd(\"D:/Yao/R data analysis/heart/8w/GO analysis/\") degs1 \u003c- read.csv(\"degsen.csv\",row.names = 1) head(degs1) degs1 #BiocManager::install(\"org.Mm.eg.db\") #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"ggplot2\") library(org.Mm.eg.db) library(org.Hs.eg.db) library(clusterProfiler) library(ggplot2) ego1 \u003c- enrichGO(gene = rownames(degs1),#Ensembl ID OrgDb=org.Mm.eg.db, ont = \"ALL\", pAdjustMethod = \"BH\", minGSSize = 10, #at least 10 gene in the ontology pvalueCutoff = 0.05, #p\u003c0.05 qvalueCutoff = 0.05, #q\u003c0.2 keyType='ENSEMBL', #Gene ID is ensumble, if you use name, please change it readable = TRUE) ##if ego is NULL, no positive results ##Save GO results write.csv(as.data.frame(ego1),\"GO_all_enrich.csv\",row.names =F) # Creation of bubble plot dotplot(ego1, split=\"ONTOLOGY\") + facet_grid(ONTOLOGY~., scale=\"free\") #saved as png ggsave(\"go.png\",units=\"cm\",width=30,height=20,dpi=1200) dev.off() Plz create a RNA-seq report step by step, which will be helpful when you write a paper. ","date":"2022-04-06","objectID":"/rna-seq-protocolstar/:8:7","tags":["RNA-seq"],"title":"RNA-seq","uri":"/rna-seq-protocolstar/"},{"categories":null,"content":"Hi! Welcome to this personal blog! üëã ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Who am I? üë®‚Äçüî¨ I‚Äôm a student doing fundamental researches in a molecular biology lab in Japan. I used transgenic mice üê≠ as well as cells to analyze unknown functions of proteins. I have a dream of experimental ‚öóÔ∏è -theoretical üíª collaboration! I want to generate a multi-scale analysis from the atomistic level to the animal model. ","date":"0001-01-01","objectID":"/about/:0:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Education üë∂ Born in Shanghai, China üéí Graduated from Shanghai High School üè´ Graduated from the University of Tsukuba (Bachelor degree) üí¶ 5-year doctoral program in the University of Tsukuba (current) ","date":"0001-01-01","objectID":"/about/:0:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Why I generate this personal blog? I‚Äôm the only one who study Bioinformatics in my lab üòñ . Though I have no background of Linux system and programming, I have great passion and enthusiasm for the field of Bioinformatics.üòç In this blog, I aim to: Generate protocols for Bioinformatics analysis Record the problems and difficulties I met and the solutions for them Note new idea and knowledge from papers ","date":"0001-01-01","objectID":"/about/:0:3","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Hobby üéØ üèÄ Basketball üéπ Piano üéÆ Video games ü§ñ Gundam ","date":"0001-01-01","objectID":"/about/:0:4","tags":null,"title":"About me","uri":"/about/"}]